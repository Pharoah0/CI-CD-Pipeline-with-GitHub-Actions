name: Deploy Lambda

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Dependencies and Publish Layer
        run: |
          mkdir python
          pip install --no-cache-dir pandas numpy -t python/
          zip -r layer.zip python
          LAYER_VERSION=$(aws lambda publish-layer-version --layer-name PandasNumpyLayer \
            --zip-file fileb://layer.zip \
            --compatible-runtimes python3.11 \
            --query Version --output text)
          if [[ -z "$LAYER_VERSION" ]]; then
              echo "Error: Layer version not retrieved!" >&2
              exit 1
          fi
          echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

      - name: Install Function
        run: |
          mkdir function
          cp lambda/lambda_function.py function/ && cd function && zip -r ../function.zip .

      - name: Upload Lambda Package to S3
        run: |
          aws s3 cp function.zip s3://${{ secrets.AWS_S3_BUCKET }}/function.zip

      - name: Check if Lambda Exists
        id: check_lambda
        continue-on-error: true
        run: aws lambda get-function --function-name EkimetricsDataProcessing

      - name: Create Lambda Function
        if: steps.check_lambda.outcome == 'failure'
        run: |
          aws lambda create-function --function-name EkimetricsDataProcessing \
            --runtime python3.11 \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_LAMBDA_ROLE }} \
            --handler lambda_function.lambda_handler \
            --code "S3Bucket=${{ secrets.AWS_S3_BUCKET }},S3Key=function.zip" \
            --layers arn:aws:lambda:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:PandasNumpyLayer:${{ env.LAYER_VERSION }} \
            --region us-east-1 \
            --debug

      - name: Ensure Lambda Uses the Latest Layer
        run: |
          LATEST_LAYER=$(aws lambda list-layer-versions --layer-name PandasNumpyLayer \
            --query 'LayerVersions[0].LayerVersionArn' --output text)
          if [[ -z "$LATEST_LAYER" ]]; then
              echo "Error: Failed to retrieve latest layer version." >&2
              exit 1
          fi
          aws lambda update-function-configuration --function-name EkimetricsDataProcessing \
            --layers $LATEST_LAYER \
            --region us-east-1

      - name: Deploy Lambda Function Code
        run: |
          aws lambda update-function-code --function-name EkimetricsDataProcessing --zip-file fileb://function.zip --region us-east-1

      - name: Ensure Lambda Runtime is Python 3.11
        run: |
          aws lambda update-function-configuration --function-name EkimetricsDataProcessing --runtime python3.11 --region us-east-1

      - name: Add S3 Trigger to Lambda
        run: |
          set -e
          if ! aws lambda get-policy --function-name EkimetricsDataProcessing | grep -q s3-trigger; then
            aws lambda add-permission \
              --function-name EkimetricsDataProcessing \
              --statement-id s3-trigger \
              --action "lambda:InvokeFunction" \
              --principal s3.amazonaws.com \
              --source-arn arn:aws:s3:::${{ secrets.AWS_S3_BUCKET }} \
              --source-account ${{ secrets.AWS_ACCOUNT_ID }} \
              --region us-east-1
          fi

          aws s3api put-bucket-notification-configuration \
            --bucket ${{ secrets.AWS_S3_BUCKET }} \
            --notification-configuration '{
              "LambdaFunctionConfigurations": [{
                "LambdaFunctionArn": "arn:aws:lambda:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:function:EkimetricsDataProcessing",
                "Events": ["s3:ObjectCreated:*"]
              }]
            }'
